buildscript {
    ext {
        springBootVersion = '2.1.2.RELEASE'
        lombokVersion = '1.18.4'
        junit5Version = '5.1.0'
        openfeignVersion = '2.0.2.RELEASE'
        springCloudVersion = 'Greenwich.RELEASE'
        springCloudServicesVersion = '3.0.1.RELEASE'
        FOMSVersion = '1.4.0'
        micrometerVerison = '1.5.0'
        jvmArgs = (project.hasProperty('jvmArgs')) ? (project.jvmArgs.split("\\s+") as List) : []
    }
    repositories {
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
        classpath("io.spring.gradle:dependency-management-plugin:0.6.0.RELEASE")
        classpath "gradle.plugin.com.avast.gradle:gradle-docker-compose-plugin:1"
    }
}

plugins {
    id 'org.springframework.boot' version '2.3.3.RELEASE'
    id 'io.spring.dependency-management' version '1.0.10.RELEASE'
    id 'java'
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'
sourceCompatibility = '1.8'

configurations {
    compileOnly {
        extendsFrom annotationProcessor
    }
}

repositories {
    mavenCentral()
}

ext {
    set('springCloudVersion', "Hoxton.SR8")
}


dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}

test {
    useJUnitPlatform()
}


subprojects {

    group 'com.example.monorepo'

    apply plugin: 'java'
    apply plugin: 'eclipse'
    apply plugin: 'org.springframework.boot'
    apply plugin: 'io.spring.dependency-management'
    apply plugin: "jacoco"

    repositories {
        jcenter()
        mavenCentral()
        mavenLocal()
        maven {
            url "https://oss.sonatype.org/content/repositories/snapshots"
        }
        maven {
            url 'http://repo.hortonworks.com/content/repositories/releases/'
        }
        maven {
            url "https://repo.spring.io/plugins-release/"
        }
        maven {
            url "https://repo.spring.io/libs-release/"
        }
    }

    dependencyManagement {
        imports {
            mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
            mavenBom "io.pivotal.spring.cloud:spring-cloud-services-dependencies:${springCloudServicesVersion}"
        }
    }

    dependencies {
        implementation 'org.springframework.boot:spring-boot-starter-actuator'
        implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
        runtimeOnly 'mysql:mysql-connector-java'
        implementation 'org.springframework.boot:spring-boot-starter-web'
        implementation 'org.springframework.cloud:spring-cloud-config-server'
        implementation 'org.springframework.cloud:spring-cloud-starter-config'
        compileOnly 'org.projectlombok:lombok'
        runtimeOnly 'com.h2database:h2'
        annotationProcessor 'org.projectlombok:lombok'
        testImplementation('org.springframework.boot:spring-boot-starter-test') {
            exclude group: 'org.junit.vintage', module: 'junit-vintage-engine'
        }

        compile group: 'org.springframework.cloud', name: 'spring-cloud-starter-netflix-eureka-client', version: '2.2.5.RELEASE'
        compile group: 'org.springframework.cloud', name: 'spring-cloud-starter-openfeign', version: '2.2.5.RELEASE'


    }

    bootJar {
        enabled = false
    }

    task pathingJar(type: Jar){
        dependsOn configurations.runtimeClasspath
        appendix = 'pathing'

        doFirst {
            manifest {
                attributes "Class-Path": configurations.runtimeClasspath.files.collect {
                    it.toURL().toString().replaceFirst("file:/","/")
                }.join(" ")
            }
        }
    }

    bootRun {
        jvmArgs = rootProject.ext.jvmArgs
        dependsOn pathingJar
        doFirst {
            classpath = files(sourceSets.main.output.files, pathingJar.archivePath)
        }
    }


}

springBoot {
    mainClassName = 'com/example/monorepo/MainApplication.java'
}